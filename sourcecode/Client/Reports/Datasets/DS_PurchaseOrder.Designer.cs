//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Client.Reports.Datasets {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DS_PurchaseOrder")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DS_PurchaseOrder : System.Data.DataSet {
        
        private dtOrderDataTable tabledtOrder;
        
        private dtCustomerDataTable tabledtCustomer;
        
        private dtOrderDetailDataTable tabledtOrderDetail;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DS_PurchaseOrder() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DS_PurchaseOrder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtOrder"] != null)) {
                    base.Tables.Add(new dtOrderDataTable(ds.Tables["dtOrder"]));
                }
                if ((ds.Tables["dtCustomer"] != null)) {
                    base.Tables.Add(new dtCustomerDataTable(ds.Tables["dtCustomer"]));
                }
                if ((ds.Tables["dtOrderDetail"] != null)) {
                    base.Tables.Add(new dtOrderDetailDataTable(ds.Tables["dtOrderDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtOrderDataTable dtOrder {
            get {
                return this.tabledtOrder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtCustomerDataTable dtCustomer {
            get {
                return this.tabledtCustomer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtOrderDetailDataTable dtOrderDetail {
            get {
                return this.tabledtOrderDetail;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DS_PurchaseOrder cln = ((DS_PurchaseOrder)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtOrder"] != null)) {
                    base.Tables.Add(new dtOrderDataTable(ds.Tables["dtOrder"]));
                }
                if ((ds.Tables["dtCustomer"] != null)) {
                    base.Tables.Add(new dtCustomerDataTable(ds.Tables["dtCustomer"]));
                }
                if ((ds.Tables["dtOrderDetail"] != null)) {
                    base.Tables.Add(new dtOrderDetailDataTable(ds.Tables["dtOrderDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtOrder = ((dtOrderDataTable)(base.Tables["dtOrder"]));
            if ((initTable == true)) {
                if ((this.tabledtOrder != null)) {
                    this.tabledtOrder.InitVars();
                }
            }
            this.tabledtCustomer = ((dtCustomerDataTable)(base.Tables["dtCustomer"]));
            if ((initTable == true)) {
                if ((this.tabledtCustomer != null)) {
                    this.tabledtCustomer.InitVars();
                }
            }
            this.tabledtOrderDetail = ((dtOrderDetailDataTable)(base.Tables["dtOrderDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtOrderDetail != null)) {
                    this.tabledtOrderDetail.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DS_PurchaseOrder";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DS_PurchaseOrder.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtOrder = new dtOrderDataTable();
            base.Tables.Add(this.tabledtOrder);
            this.tabledtCustomer = new dtCustomerDataTable();
            base.Tables.Add(this.tabledtCustomer);
            this.tabledtOrderDetail = new dtOrderDetailDataTable();
            base.Tables.Add(this.tabledtOrderDetail);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtOrder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtCustomer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtOrderDetail() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DS_PurchaseOrder ds = new DS_PurchaseOrder();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void dtOrderRowChangeEventHandler(object sender, dtOrderRowChangeEvent e);
        
        public delegate void dtCustomerRowChangeEventHandler(object sender, dtCustomerRowChangeEvent e);
        
        public delegate void dtOrderDetailRowChangeEventHandler(object sender, dtOrderDetailRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtOrderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnCustomerID;
            
            private System.Data.DataColumn columnPurchaseDate;
            
            private System.Data.DataColumn columnOrderState;
            
            private System.Data.DataColumn columnPaymentMethod;
            
            private System.Data.DataColumn columnTotal;
            
            private System.Data.DataColumn columnBalance;
            
            private System.Data.DataColumn columnDeposit;
            
            private System.Data.DataColumn columnReferenceNo;
            
            private System.Data.DataColumn columnUnderlayType;
            
            private System.Data.DataColumn columnUnderlayQty;
            
            private System.Data.DataColumn columnRequest;
            
            private System.Data.DataColumn columnFittingDate;
            
            private System.Data.DataColumn columnMeasurementDate;
            
            private System.Data.DataColumn columnDBSingleSTD;
            
            private System.Data.DataColumn columnDBSingleSTP;
            
            private System.Data.DataColumn columnDBDoubleSTD;
            
            private System.Data.DataColumn columnDBDoubleSTP;
            
            private System.Data.DataColumn columnDBCoverSTD;
            
            private System.Data.DataColumn columnDBCoverSTP;
            
            private System.Data.DataColumn columnDBZSectionSTD;
            
            private System.Data.DataColumn columnDBZSectionSTP;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderDataTable() {
                this.TableName = "dtOrder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtOrderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtOrderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchaseDateColumn {
                get {
                    return this.columnPurchaseDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStateColumn {
                get {
                    return this.columnOrderState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PaymentMethodColumn {
                get {
                    return this.columnPaymentMethod;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DepositColumn {
                get {
                    return this.columnDeposit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReferenceNoColumn {
                get {
                    return this.columnReferenceNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnderlayTypeColumn {
                get {
                    return this.columnUnderlayType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnderlayQtyColumn {
                get {
                    return this.columnUnderlayQty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RequestColumn {
                get {
                    return this.columnRequest;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FittingDateColumn {
                get {
                    return this.columnFittingDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MeasurementDateColumn {
                get {
                    return this.columnMeasurementDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBSingleSTDColumn {
                get {
                    return this.columnDBSingleSTD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBSingleSTPColumn {
                get {
                    return this.columnDBSingleSTP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBDoubleSTDColumn {
                get {
                    return this.columnDBDoubleSTD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBDoubleSTPColumn {
                get {
                    return this.columnDBDoubleSTP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBCoverSTDColumn {
                get {
                    return this.columnDBCoverSTD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBCoverSTPColumn {
                get {
                    return this.columnDBCoverSTP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBZSectionSTDColumn {
                get {
                    return this.columnDBZSectionSTD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DBZSectionSTPColumn {
                get {
                    return this.columnDBZSectionSTP;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderRow this[int index] {
                get {
                    return ((dtOrderRow)(this.Rows[index]));
                }
            }
            
            public event dtOrderRowChangeEventHandler dtOrderRowChanging;
            
            public event dtOrderRowChangeEventHandler dtOrderRowChanged;
            
            public event dtOrderRowChangeEventHandler dtOrderRowDeleting;
            
            public event dtOrderRowChangeEventHandler dtOrderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtOrderRow(dtOrderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderRow AdddtOrderRow(
                        int ID, 
                        int CustomerID, 
                        System.DateTime PurchaseDate, 
                        short OrderState, 
                        short PaymentMethod, 
                        double Total, 
                        double Balance, 
                        double Deposit, 
                        string ReferenceNo, 
                        string UnderlayType, 
                        string UnderlayQty, 
                        string Request, 
                        System.DateTime FittingDate, 
                        System.DateTime MeasurementDate, 
                        string DBSingleSTD, 
                        string DBSingleSTP, 
                        string DBDoubleSTD, 
                        string DBDoubleSTP, 
                        string DBCoverSTD, 
                        string DBCoverSTP, 
                        string DBZSectionSTD, 
                        string DBZSectionSTP) {
                dtOrderRow rowdtOrderRow = ((dtOrderRow)(this.NewRow()));
                rowdtOrderRow.ItemArray = new object[] {
                        ID,
                        CustomerID,
                        PurchaseDate,
                        OrderState,
                        PaymentMethod,
                        Total,
                        Balance,
                        Deposit,
                        ReferenceNo,
                        UnderlayType,
                        UnderlayQty,
                        Request,
                        FittingDate,
                        MeasurementDate,
                        DBSingleSTD,
                        DBSingleSTP,
                        DBDoubleSTD,
                        DBDoubleSTP,
                        DBCoverSTD,
                        DBCoverSTP,
                        DBZSectionSTD,
                        DBZSectionSTP};
                this.Rows.Add(rowdtOrderRow);
                return rowdtOrderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderRow FindByID(int ID) {
                return ((dtOrderRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                dtOrderDataTable cln = ((dtOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new dtOrderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCustomerID = base.Columns["CustomerID"];
                this.columnPurchaseDate = base.Columns["PurchaseDate"];
                this.columnOrderState = base.Columns["OrderState"];
                this.columnPaymentMethod = base.Columns["PaymentMethod"];
                this.columnTotal = base.Columns["Total"];
                this.columnBalance = base.Columns["Balance"];
                this.columnDeposit = base.Columns["Deposit"];
                this.columnReferenceNo = base.Columns["ReferenceNo"];
                this.columnUnderlayType = base.Columns["UnderlayType"];
                this.columnUnderlayQty = base.Columns["UnderlayQty"];
                this.columnRequest = base.Columns["Request"];
                this.columnFittingDate = base.Columns["FittingDate"];
                this.columnMeasurementDate = base.Columns["MeasurementDate"];
                this.columnDBSingleSTD = base.Columns["DBSingleSTD"];
                this.columnDBSingleSTP = base.Columns["DBSingleSTP"];
                this.columnDBDoubleSTD = base.Columns["DBDoubleSTD"];
                this.columnDBDoubleSTP = base.Columns["DBDoubleSTP"];
                this.columnDBCoverSTD = base.Columns["DBCoverSTD"];
                this.columnDBCoverSTP = base.Columns["DBCoverSTP"];
                this.columnDBZSectionSTD = base.Columns["DBZSectionSTD"];
                this.columnDBZSectionSTP = base.Columns["DBZSectionSTP"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCustomerID = new System.Data.DataColumn("CustomerID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerID);
                this.columnPurchaseDate = new System.Data.DataColumn("PurchaseDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseDate);
                this.columnOrderState = new System.Data.DataColumn("OrderState", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderState);
                this.columnPaymentMethod = new System.Data.DataColumn("PaymentMethod", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentMethod);
                this.columnTotal = new System.Data.DataColumn("Total", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnBalance = new System.Data.DataColumn("Balance", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
                this.columnDeposit = new System.Data.DataColumn("Deposit", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeposit);
                this.columnReferenceNo = new System.Data.DataColumn("ReferenceNo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceNo);
                this.columnUnderlayType = new System.Data.DataColumn("UnderlayType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnderlayType);
                this.columnUnderlayQty = new System.Data.DataColumn("UnderlayQty", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnderlayQty);
                this.columnRequest = new System.Data.DataColumn("Request", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequest);
                this.columnFittingDate = new System.Data.DataColumn("FittingDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFittingDate);
                this.columnMeasurementDate = new System.Data.DataColumn("MeasurementDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementDate);
                this.columnDBSingleSTD = new System.Data.DataColumn("DBSingleSTD", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBSingleSTD);
                this.columnDBSingleSTP = new System.Data.DataColumn("DBSingleSTP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBSingleSTP);
                this.columnDBDoubleSTD = new System.Data.DataColumn("DBDoubleSTD", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBDoubleSTD);
                this.columnDBDoubleSTP = new System.Data.DataColumn("DBDoubleSTP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBDoubleSTP);
                this.columnDBCoverSTD = new System.Data.DataColumn("DBCoverSTD", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBCoverSTD);
                this.columnDBCoverSTP = new System.Data.DataColumn("DBCoverSTP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBCoverSTP);
                this.columnDBZSectionSTD = new System.Data.DataColumn("DBZSectionSTD", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBZSectionSTD);
                this.columnDBZSectionSTP = new System.Data.DataColumn("DBZSectionSTP", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDBZSectionSTP);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnID.DefaultValue = ((int)(0));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderRow NewdtOrderRow() {
                return ((dtOrderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new dtOrderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(dtOrderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtOrderRowChanged != null)) {
                    this.dtOrderRowChanged(this, new dtOrderRowChangeEvent(((dtOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtOrderRowChanging != null)) {
                    this.dtOrderRowChanging(this, new dtOrderRowChangeEvent(((dtOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtOrderRowDeleted != null)) {
                    this.dtOrderRowDeleted(this, new dtOrderRowChangeEvent(((dtOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtOrderRowDeleting != null)) {
                    this.dtOrderRowDeleting(this, new dtOrderRowChangeEvent(((dtOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtOrderRow(dtOrderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DS_PurchaseOrder ds = new DS_PurchaseOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtOrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtCustomerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnFirstName;
            
            private System.Data.DataColumn columnMidName;
            
            private System.Data.DataColumn columnLastName;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnPostalCode;
            
            private System.Data.DataColumn columnPhone;
            
            private System.Data.DataColumn columnCell;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCustomerDataTable() {
                this.TableName = "dtCustomer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCustomerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtCustomerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MidNameColumn {
                get {
                    return this.columnMidName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CellColumn {
                get {
                    return this.columnCell;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCustomerRow this[int index] {
                get {
                    return ((dtCustomerRow)(this.Rows[index]));
                }
            }
            
            public event dtCustomerRowChangeEventHandler dtCustomerRowChanging;
            
            public event dtCustomerRowChangeEventHandler dtCustomerRowChanged;
            
            public event dtCustomerRowChangeEventHandler dtCustomerRowDeleting;
            
            public event dtCustomerRowChangeEventHandler dtCustomerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtCustomerRow(dtCustomerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCustomerRow AdddtCustomerRow(int ID, string Title, string FirstName, string MidName, string LastName, string Address, string PostalCode, string Phone, string Cell) {
                dtCustomerRow rowdtCustomerRow = ((dtCustomerRow)(this.NewRow()));
                rowdtCustomerRow.ItemArray = new object[] {
                        ID,
                        Title,
                        FirstName,
                        MidName,
                        LastName,
                        Address,
                        PostalCode,
                        Phone,
                        Cell};
                this.Rows.Add(rowdtCustomerRow);
                return rowdtCustomerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCustomerRow FindByID(int ID) {
                return ((dtCustomerRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                dtCustomerDataTable cln = ((dtCustomerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new dtCustomerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTitle = base.Columns["Title"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnMidName = base.Columns["MidName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnAddress = base.Columns["Address"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnPhone = base.Columns["Phone"];
                this.columnCell = base.Columns["Cell"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnFirstName = new System.Data.DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnMidName = new System.Data.DataColumn("MidName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMidName);
                this.columnLastName = new System.Data.DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnPostalCode = new System.Data.DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode);
                this.columnPhone = new System.Data.DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnCell = new System.Data.DataColumn("Cell", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCell);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCustomerRow NewdtCustomerRow() {
                return ((dtCustomerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new dtCustomerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(dtCustomerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtCustomerRowChanged != null)) {
                    this.dtCustomerRowChanged(this, new dtCustomerRowChangeEvent(((dtCustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtCustomerRowChanging != null)) {
                    this.dtCustomerRowChanging(this, new dtCustomerRowChangeEvent(((dtCustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtCustomerRowDeleted != null)) {
                    this.dtCustomerRowDeleted(this, new dtCustomerRowChangeEvent(((dtCustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtCustomerRowDeleting != null)) {
                    this.dtCustomerRowDeleting(this, new dtCustomerRowChangeEvent(((dtCustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtCustomerRow(dtCustomerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DS_PurchaseOrder ds = new DS_PurchaseOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtCustomerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtOrderDetailDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnCarpet;
            
            private System.Data.DataColumn columnColor;
            
            private System.Data.DataColumn columnBacking;
            
            private System.Data.DataColumn columnNo;
            
            private System.Data.DataColumn columnLength;
            
            private System.Data.DataColumn columnBreadth;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnCost;
            
            private System.Data.DataColumn columnNotes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderDetailDataTable() {
                this.TableName = "dtOrderDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtOrderDetailDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtOrderDetailDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CarpetColumn {
                get {
                    return this.columnCarpet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ColorColumn {
                get {
                    return this.columnColor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BackingColumn {
                get {
                    return this.columnBacking;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoColumn {
                get {
                    return this.columnNo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BreadthColumn {
                get {
                    return this.columnBreadth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderDetailRow this[int index] {
                get {
                    return ((dtOrderDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtOrderDetailRowChangeEventHandler dtOrderDetailRowChanging;
            
            public event dtOrderDetailRowChangeEventHandler dtOrderDetailRowChanged;
            
            public event dtOrderDetailRowChangeEventHandler dtOrderDetailRowDeleting;
            
            public event dtOrderDetailRowChangeEventHandler dtOrderDetailRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtOrderDetailRow(dtOrderDetailRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderDetailRow AdddtOrderDetailRow(int ID, string Carpet, string Color, string Backing, string No, double Length, double Breadth, int Quantity, double Cost, string Notes) {
                dtOrderDetailRow rowdtOrderDetailRow = ((dtOrderDetailRow)(this.NewRow()));
                rowdtOrderDetailRow.ItemArray = new object[] {
                        ID,
                        Carpet,
                        Color,
                        Backing,
                        No,
                        Length,
                        Breadth,
                        Quantity,
                        Cost,
                        Notes};
                this.Rows.Add(rowdtOrderDetailRow);
                return rowdtOrderDetailRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderDetailRow FindByID(int ID) {
                return ((dtOrderDetailRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                dtOrderDetailDataTable cln = ((dtOrderDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new dtOrderDetailDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCarpet = base.Columns["Carpet"];
                this.columnColor = base.Columns["Color"];
                this.columnBacking = base.Columns["Backing"];
                this.columnNo = base.Columns["No"];
                this.columnLength = base.Columns["Length"];
                this.columnBreadth = base.Columns["Breadth"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCost = base.Columns["Cost"];
                this.columnNotes = base.Columns["Notes"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCarpet = new System.Data.DataColumn("Carpet", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarpet);
                this.columnColor = new System.Data.DataColumn("Color", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColor);
                this.columnBacking = new System.Data.DataColumn("Backing", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBacking);
                this.columnNo = new System.Data.DataColumn("No", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNo);
                this.columnLength = new System.Data.DataColumn("Length", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnBreadth = new System.Data.DataColumn("Breadth", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBreadth);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCost = new System.Data.DataColumn("Cost", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnNotes = new System.Data.DataColumn("Notes", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderDetailRow NewdtOrderDetailRow() {
                return ((dtOrderDetailRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new dtOrderDetailRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(dtOrderDetailRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtOrderDetailRowChanged != null)) {
                    this.dtOrderDetailRowChanged(this, new dtOrderDetailRowChangeEvent(((dtOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtOrderDetailRowChanging != null)) {
                    this.dtOrderDetailRowChanging(this, new dtOrderDetailRowChangeEvent(((dtOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtOrderDetailRowDeleted != null)) {
                    this.dtOrderDetailRowDeleted(this, new dtOrderDetailRowChangeEvent(((dtOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtOrderDetailRowDeleting != null)) {
                    this.dtOrderDetailRowDeleting(this, new dtOrderDetailRowChangeEvent(((dtOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtOrderDetailRow(dtOrderDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DS_PurchaseOrder ds = new DS_PurchaseOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtOrderDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtOrderRow : System.Data.DataRow {
            
            private dtOrderDataTable tabledtOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtOrderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtOrder = ((dtOrderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tabledtOrder.IDColumn]));
                }
                set {
                    this[this.tabledtOrder.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CustomerID {
                get {
                    try {
                        return ((int)(this[this.tabledtOrder.CustomerIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CustomerID\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.CustomerIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PurchaseDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledtOrder.PurchaseDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PurchaseDate\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.PurchaseDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short OrderState {
                get {
                    try {
                        return ((short)(this[this.tabledtOrder.OrderStateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderState\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.OrderStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short PaymentMethod {
                get {
                    try {
                        return ((short)(this[this.tabledtOrder.PaymentMethodColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PaymentMethod\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.PaymentMethodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Total {
                get {
                    try {
                        return ((double)(this[this.tabledtOrder.TotalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Total\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.TotalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Balance {
                get {
                    try {
                        return ((double)(this[this.tabledtOrder.BalanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Balance\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.BalanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Deposit {
                get {
                    try {
                        return ((double)(this[this.tabledtOrder.DepositColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Deposit\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.DepositColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReferenceNo {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.ReferenceNoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReferenceNo\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.ReferenceNoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnderlayType {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.UnderlayTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UnderlayType\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.UnderlayTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnderlayQty {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.UnderlayQtyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UnderlayQty\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.UnderlayQtyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Request {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.RequestColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Request\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.RequestColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FittingDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledtOrder.FittingDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FittingDate\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.FittingDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MeasurementDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledtOrder.MeasurementDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MeasurementDate\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.MeasurementDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBSingleSTD {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.DBSingleSTDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DBSingleSTD\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.DBSingleSTDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBSingleSTP {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.DBSingleSTPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DBSingleSTP\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.DBSingleSTPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBDoubleSTD {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.DBDoubleSTDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DBDoubleSTD\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.DBDoubleSTDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBDoubleSTP {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.DBDoubleSTPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DBDoubleSTP\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.DBDoubleSTPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBCoverSTD {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.DBCoverSTDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DBCoverSTD\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.DBCoverSTDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBCoverSTP {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.DBCoverSTPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DBCoverSTP\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.DBCoverSTPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBZSectionSTD {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.DBZSectionSTDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DBZSectionSTD\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.DBZSectionSTDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DBZSectionSTP {
                get {
                    try {
                        return ((string)(this[this.tabledtOrder.DBZSectionSTPColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DBZSectionSTP\' in table \'dtOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrder.DBZSectionSTPColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIDNull() {
                return this.IsNull(this.tabledtOrder.CustomerIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIDNull() {
                this[this.tabledtOrder.CustomerIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchaseDateNull() {
                return this.IsNull(this.tabledtOrder.PurchaseDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchaseDateNull() {
                this[this.tabledtOrder.PurchaseDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderStateNull() {
                return this.IsNull(this.tabledtOrder.OrderStateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderStateNull() {
                this[this.tabledtOrder.OrderStateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentMethodNull() {
                return this.IsNull(this.tabledtOrder.PaymentMethodColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentMethodNull() {
                this[this.tabledtOrder.PaymentMethodColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tabledtOrder.TotalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tabledtOrder.TotalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceNull() {
                return this.IsNull(this.tabledtOrder.BalanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceNull() {
                this[this.tabledtOrder.BalanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepositNull() {
                return this.IsNull(this.tabledtOrder.DepositColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepositNull() {
                this[this.tabledtOrder.DepositColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferenceNoNull() {
                return this.IsNull(this.tabledtOrder.ReferenceNoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferenceNoNull() {
                this[this.tabledtOrder.ReferenceNoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnderlayTypeNull() {
                return this.IsNull(this.tabledtOrder.UnderlayTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnderlayTypeNull() {
                this[this.tabledtOrder.UnderlayTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnderlayQtyNull() {
                return this.IsNull(this.tabledtOrder.UnderlayQtyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnderlayQtyNull() {
                this[this.tabledtOrder.UnderlayQtyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestNull() {
                return this.IsNull(this.tabledtOrder.RequestColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestNull() {
                this[this.tabledtOrder.RequestColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFittingDateNull() {
                return this.IsNull(this.tabledtOrder.FittingDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFittingDateNull() {
                this[this.tabledtOrder.FittingDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementDateNull() {
                return this.IsNull(this.tabledtOrder.MeasurementDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementDateNull() {
                this[this.tabledtOrder.MeasurementDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBSingleSTDNull() {
                return this.IsNull(this.tabledtOrder.DBSingleSTDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBSingleSTDNull() {
                this[this.tabledtOrder.DBSingleSTDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBSingleSTPNull() {
                return this.IsNull(this.tabledtOrder.DBSingleSTPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBSingleSTPNull() {
                this[this.tabledtOrder.DBSingleSTPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBDoubleSTDNull() {
                return this.IsNull(this.tabledtOrder.DBDoubleSTDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBDoubleSTDNull() {
                this[this.tabledtOrder.DBDoubleSTDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBDoubleSTPNull() {
                return this.IsNull(this.tabledtOrder.DBDoubleSTPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBDoubleSTPNull() {
                this[this.tabledtOrder.DBDoubleSTPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBCoverSTDNull() {
                return this.IsNull(this.tabledtOrder.DBCoverSTDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBCoverSTDNull() {
                this[this.tabledtOrder.DBCoverSTDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBCoverSTPNull() {
                return this.IsNull(this.tabledtOrder.DBCoverSTPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBCoverSTPNull() {
                this[this.tabledtOrder.DBCoverSTPColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBZSectionSTDNull() {
                return this.IsNull(this.tabledtOrder.DBZSectionSTDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBZSectionSTDNull() {
                this[this.tabledtOrder.DBZSectionSTDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDBZSectionSTPNull() {
                return this.IsNull(this.tabledtOrder.DBZSectionSTPColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDBZSectionSTPNull() {
                this[this.tabledtOrder.DBZSectionSTPColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtCustomerRow : System.Data.DataRow {
            
            private dtCustomerDataTable tabledtCustomer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCustomerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtCustomer = ((dtCustomerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tabledtCustomer.IDColumn]));
                }
                set {
                    this[this.tabledtCustomer.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tabledtCustomer.TitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Title\' in table \'dtCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCustomer.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tabledtCustomer.FirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FirstName\' in table \'dtCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCustomer.FirstNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MidName {
                get {
                    try {
                        return ((string)(this[this.tabledtCustomer.MidNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MidName\' in table \'dtCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCustomer.MidNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tabledtCustomer.LastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LastName\' in table \'dtCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCustomer.LastNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tabledtCustomer.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Address\' in table \'dtCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCustomer.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tabledtCustomer.PostalCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PostalCode\' in table \'dtCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCustomer.PostalCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tabledtCustomer.PhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Phone\' in table \'dtCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCustomer.PhoneColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cell {
                get {
                    try {
                        return ((string)(this[this.tabledtCustomer.CellColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Cell\' in table \'dtCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCustomer.CellColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tabledtCustomer.TitleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tabledtCustomer.TitleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tabledtCustomer.FirstNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tabledtCustomer.FirstNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMidNameNull() {
                return this.IsNull(this.tabledtCustomer.MidNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMidNameNull() {
                this[this.tabledtCustomer.MidNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tabledtCustomer.LastNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tabledtCustomer.LastNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tabledtCustomer.AddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tabledtCustomer.AddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tabledtCustomer.PostalCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCodeNull() {
                this[this.tabledtCustomer.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tabledtCustomer.PhoneColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tabledtCustomer.PhoneColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCellNull() {
                return this.IsNull(this.tabledtCustomer.CellColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCellNull() {
                this[this.tabledtCustomer.CellColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtOrderDetailRow : System.Data.DataRow {
            
            private dtOrderDetailDataTable tabledtOrderDetail;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtOrderDetailRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtOrderDetail = ((dtOrderDetailDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tabledtOrderDetail.IDColumn]));
                }
                set {
                    this[this.tabledtOrderDetail.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Carpet {
                get {
                    try {
                        return ((string)(this[this.tabledtOrderDetail.CarpetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Carpet\' in table \'dtOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrderDetail.CarpetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Color {
                get {
                    try {
                        return ((string)(this[this.tabledtOrderDetail.ColorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Color\' in table \'dtOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrderDetail.ColorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Backing {
                get {
                    try {
                        return ((string)(this[this.tabledtOrderDetail.BackingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Backing\' in table \'dtOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrderDetail.BackingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string No {
                get {
                    try {
                        return ((string)(this[this.tabledtOrderDetail.NoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'No\' in table \'dtOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrderDetail.NoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Length {
                get {
                    try {
                        return ((double)(this[this.tabledtOrderDetail.LengthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Length\' in table \'dtOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrderDetail.LengthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Breadth {
                get {
                    try {
                        return ((double)(this[this.tabledtOrderDetail.BreadthColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Breadth\' in table \'dtOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrderDetail.BreadthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Quantity {
                get {
                    try {
                        return ((int)(this[this.tabledtOrderDetail.QuantityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Quantity\' in table \'dtOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrderDetail.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Cost {
                get {
                    try {
                        return ((double)(this[this.tabledtOrderDetail.CostColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Cost\' in table \'dtOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrderDetail.CostColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tabledtOrderDetail.NotesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Notes\' in table \'dtOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtOrderDetail.NotesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarpetNull() {
                return this.IsNull(this.tabledtOrderDetail.CarpetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarpetNull() {
                this[this.tabledtOrderDetail.CarpetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColorNull() {
                return this.IsNull(this.tabledtOrderDetail.ColorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColorNull() {
                this[this.tabledtOrderDetail.ColorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackingNull() {
                return this.IsNull(this.tabledtOrderDetail.BackingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackingNull() {
                this[this.tabledtOrderDetail.BackingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoNull() {
                return this.IsNull(this.tabledtOrderDetail.NoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoNull() {
                this[this.tabledtOrderDetail.NoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tabledtOrderDetail.LengthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tabledtOrderDetail.LengthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBreadthNull() {
                return this.IsNull(this.tabledtOrderDetail.BreadthColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBreadthNull() {
                this[this.tabledtOrderDetail.BreadthColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tabledtOrderDetail.QuantityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tabledtOrderDetail.QuantityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tabledtOrderDetail.CostColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tabledtOrderDetail.CostColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tabledtOrderDetail.NotesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tabledtOrderDetail.NotesColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtOrderRowChangeEvent : System.EventArgs {
            
            private dtOrderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderRowChangeEvent(dtOrderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtCustomerRowChangeEvent : System.EventArgs {
            
            private dtCustomerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCustomerRowChangeEvent(dtCustomerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCustomerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtOrderDetailRowChangeEvent : System.EventArgs {
            
            private dtOrderDetailRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderDetailRowChangeEvent(dtOrderDetailRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtOrderDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591